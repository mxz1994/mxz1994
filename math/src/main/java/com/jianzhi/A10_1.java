package com.jianzhi;

/**
 * 矩形覆盖
 *
 * 我们可以用 2*1 的小矩形横着或者竖着去覆盖更大的矩形。请问用 n 个 2*1 的小矩形无重叠地覆盖一个 2*n 的大矩形，总共有多少种方法？
 *
 * 斐波那契数列
 *
 * 当n 为1时， 有 1种
 * 当n 为2， 2种
 *
 * n = 1 的时候
 * 只能横着覆盖，一种
 * n = 2 的时候
 * 可以横着和竖着覆盖，两种
 * n = 3 的时候
 * 第三级横着覆盖，用了一级，剩下 n = 2，有两种覆盖方法
 * 第三季竖着覆盖，用了两级，剩下 n = 1，有一种覆盖方法
 * 总共有 3 种
 * n = 4 的时候
 * 第 4 级横着覆盖，用了一级，剩下 n = 3，有三种覆盖方法
 * 第 4 级竖着覆盖，用了两级，剩下 n = 2，有两种覆盖方法
 * 总共有 5 种方法
 * n = n 的时候
 * 第 n 级横着覆盖，用了一级，剩下 n = n - 1，所以关注第 n - 1 种有几种覆盖方法
 * 第 n 级竖着覆盖，用了两级，剩下 n = n - 2，所以关注第 n - 2 种有几种覆盖方法
 * 总和为两种情况的总和
 *
 * 涂掉最后一级矩阵的时候，可以选择使用横向完成，也可以使用竖向完成，横向涂剩下 n - 1 阶，竖向涂剩下 n - 2 阶
 *
 *
 * 要覆盖 2*n 的大矩形，可以先覆盖 2*1 的矩形，再覆盖 2*(n-1) 的矩形；
 * 或者先覆盖 2*2 的矩形，再覆盖 2*(n-2) 的矩形。
 * 而覆盖 2*(n-1) 和 2*(n-2) 的矩形可以看成子问题。该问题的递推公式如下：
 * f(n) = f(n-1) + f(n-2)
 * @author mxz on 2020/10/10 20:12
 */
public class A10_1 {
    public static void main(String[] args) {
        int n = 4;
        RectCover(n);
    }

    public static int RectCover(int target) {
        if (target <= 2){
            return target;
        }
        int pre1 = 2; // n 最后使用一块，剩下 n-1 块的写法
        int pre2 = 1; // n 最后使用两块，剩下 n-2 块的写法
        for (int i = 3; i <= target; i++){
            int cur = pre1 + pre2;
            pre2 = pre1;
            pre1 = cur;
        }
        return pre1; //相对于 n+1 块来说，第 n 种的方法
    }
}
